//#pragma once
//
//namespace protocol
//{
//	/**
//	* @class
//	* @brief エンジンと標準入出力を介してやり取りできるシェルを提供する.
//	* @detail
//	* * プロトコルについて
//	*	** クライアントからエンジンへのコマンドのルール
//	*		クライアントからエンジンへのコマンドは標準入力から1行で与えられる.
//	*		エンジンはクライアントのコマンドに対して, 入力された順に以下のフォーマットで1行のレスポンスを標準出力に書き込む.
//	* 
//	*		フォーマット: "res {コマンドで要求されたデータ}\n"
//	* 
//	*		特にデータの要求の無いコマンド(go コマンドなど)の場合は, "res\n"のみを出力する.
//	*		1つのコマンドで複数のレスポンスが返るコマンドもある(optionsコマンドなど).
//	* 
//	*	** エンジンからクライアントへのコマンドのルール
//	*		エンジンからクライアントへのコマンドは標準出力に1行で書き込まれる. 
//	*		エンジンからクライアントへのコマンドは一方向であり, クライアント側がレスポンスを返す必要はない.
//	*		なお, エンジンからクライアントへのコマンドは先頭に"res "を含んではならない(レスポンスと区別ができなくなるため).
//	*
//	*	** クライアントからエンジンへのコマンド一覧
//	* 
//	*		[]はオプショナル.
//	* 
//	*		*** init コマンド
//	*			入力: "init"
//				出力: "res done"
//	* 
//	*		*** name コマンド
//	*			入力: "name"
//	*			応答: "res {エンジン名}"
//	* 
//	*		*** version コマンド
//	*			入力: "version"
//	*			応答: "res {version}\n"
//	* 
//	*		*** options コマンド
//	*			入力: "options"
//	*			応答: "res name {オプション名} type {オプションタイプ} default {デフォルト値} [min {最小値}] [max {最大値}]" (オプションの数だけ出力)
//	*				  "res done"(全てのオプションを列挙し終えたら出力)
//	* 
//	*		*** set_option コマンド
//	*			入力: "set_option {オプション名} {値}"
//	*			出力: "res done"(正常終了)
//	*				　"res unexist"(存在しないオプション)
//	*				  "res invalid_value [msg {エラーメッセージ}]
//	* 
//	*		*** pos コマンド
//	*			入力: "pos"
//	*			応答: "res {盤面}"
//	*			詳細: 盤面はA1A2..B1B2...H1H2..H7H8の順で, 黒を'X', 白を'O', 空きマスを'-'で表現.
//	*		
//	**/
//	class SimpleShell
//	{
//
//	};
//}
